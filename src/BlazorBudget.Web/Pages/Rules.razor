@page "/rules"
@using BlazorBudget.Web.Data
@using Microsoft.Extensions.Logging
@inject TransactionService TransactionService
@inject ClassificationService ClassificationService
@inject ILogger<Rules> Logger

<PageTitle>Classification</PageTitle>

<h1>Classification Rule Overview</h1>
@if (rulesWithMatches == null)
{
    <p><em>Loading Rules...</em></p>
}
else
{

    @foreach (var rule in allRules)
    {
        var matches = rulesWithMatches[rule];
        var active = rule == selectedRule;
        var accordionBtnClass = active ? "" : "collapsed";
        var toggleSelected = active? null : rule;
        var accordionBodyClass = active ? "show" : "collapse";

        <div class="accordion-item">
            <h2 class="accordion-header">
            <button class="accordion-button @accordionBtnClass" type="button" @onclick="@(e => selectedRule = toggleSelected)" >
                @DisplayStringForRule(rule)            
                <span class="badge bg-secondary">@matches.Count()</span>
            </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse @accordionBodyClass">
                <div class="accordion-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Recipient</th>
                                <th>Reference</th>
                                <th>Amount</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var transaction in matches)
                            {
                                <tr>
                                    <td>@transaction.Date</td>
                                    <td>@transaction.Recipient</td>
                                    <td>@transaction.Reference</td>
                                    <td>@transaction.Amount</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
}

@code {
    private Transaction[]? allTransactions;
    private Lookup<ClassificationRule, Transaction>? rulesWithMatches;
    private ClassificationRule[] allRules = Array.Empty<ClassificationRule>();
    private ClassificationRule? selectedRule = null;

    protected override async Task OnInitializedAsync()
    {
        allTransactions = await TransactionService.GetTransactionsAsync();
        allRules = await ClassificationService.GetAllRulesAsync() ?? Array.Empty<ClassificationRule>();

        rulesWithMatches = (Lookup<ClassificationRule, Transaction>)allTransactions
            .ToLookup(transaction => allRules.First(r => r.Filter.Matches(transaction)));
    }

    private string DisplayStringForRule(ClassificationRule rule)
    => $"<{rule.Filter.TextFilter}> in {DisplayStringForMatchSource(rule.Filter)} will apply category <{rule.TargetCategory}> ";
   
    private string DisplayStringForMatchSource(TransactionFilter filter)
    => (filter.MatchRecipient, filter.MatchReference) switch {
        (false, false) => "??",
        (false, true) => "reference",
        (true, false) => "recipient",
        (true, true) => "recipient or reference",
    };
}
