@page "/month"
@using BlazorBudget.Web.Data
@using Microsoft.Extensions.Logging
@inject TransactionService TransactionService
@inject ClassificationService ClassificationService
@inject ILogger<Monthview> Logger

<PageTitle>@title</PageTitle>

<h1>@title</h1>

<button class="button" type="button" @onclick="PreviousMonth" >
    👈 Previous month
</button>
<button class="button" type="button" @onclick="NextMonth" >
    Next month 👉
</button>

@if (transactionsInPeriod is null || categorizedTransactions is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Category</th>
                <th># Transactions</th>
                <th>Balance</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in categorizedTransactions.OrderBy(g=>g.Sum(t => t.Amount)))
            {
                <tr>
                    <td><CategorySpan Name="@group.Key" /></td>
                    <td>@group.Count()</td>
                    <td>@group.Sum(t => t.Amount)</td> 
                </tr>
            }
        </tbody>
    </table>
    @foreach (var group in categorizedTransactions.OrderBy(g=>g.Key))
    {
        var transactions = group.ToArray();
        <h3><CategorySpan Name=@group.Key /></h3>
        <TransactionTable Transactions="@transactions"></TransactionTable>
    }
}

@code {
    private DateOnly endDate;
    private string title = "Monthly View";

    private Transaction[]? allTransactions;
    private ClassificationRule[] allRules = Array.Empty<ClassificationRule>();

    private Transaction[]? transactionsInPeriod;
    private Lookup<string, Transaction>? categorizedTransactions;

    protected override async Task OnInitializedAsync()
    {
        allTransactions = await TransactionService.GetTransactionsAsync();
        allRules = await ClassificationService.GetAllRulesAsync() ?? Array.Empty<ClassificationRule>();

        var now = DateTime.Now;
        AdjustToPeriod(new DateOnly(now.Year, now.Month, 1));
    }

    private void NextMonth() => AdjustToPeriod(endDate.AddMonths(1));
    private void PreviousMonth() => AdjustToPeriod(endDate.AddMonths(-1));

    private void AdjustToPeriod(DateOnly newEndDate)
    {
        Logger.LogInformation("Adjusting to display month before {endDate}", newEndDate);
        
        endDate = newEndDate;
        var startDate = endDate.AddMonths(-1);

        if (allTransactions is not null)
        {
            transactionsInPeriod = allTransactions
                .Where(t => t.Date >= startDate && t.Date < endDate)
                .ToArray();

            categorizedTransactions = (Lookup<string, Transaction>)transactionsInPeriod
                .ToLookup(transaction => allRules.First(r => r.Filter.Matches(transaction)).TargetCategory);
        }

        title = $"💰 {startDate:MMM yyyy}";
    }
}
