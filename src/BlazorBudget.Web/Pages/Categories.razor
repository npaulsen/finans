@page "/categories"
@using BlazorBudget.Web.Data
@using Microsoft.Extensions.Logging
@inject TransactionService TransactionService
@inject ClassificationService ClassificationService
@inject ILogger<Categories> Logger

<PageTitle>Categories</PageTitle>

<h1>Categories</h1>

@if (categorizedTransactions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Category</th>
                <th># Transactions</th>
                <th>Total Incoming</th>
                <th>Total Outgoing</th>
                <th>..</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in categorizedTransactions.OrderBy(g=>g.Key))
            {
                <tr>
                    <td>@group.Key <a href="/categories#@group.Key">⬇️</a></td>
                    <td>@group.Count()</td>
                    <td>@group.Where(t => t.Amount > 0).Sum(t => t.Amount)</td>
                    <td>@group.Where(t => t.Amount < 0).Sum(t => t.Amount)</td>     
                </tr>
            }
        </tbody>
    </table>
    @foreach (var group in categorizedTransactions.OrderBy(g=>g.Key))
    {
        var transactions = group.ToArray();
        <h3><span id=@group.Key>@group.Key</span></h3>
        <TransactionTable Transactions="@transactions"></TransactionTable>
    }
}

@code {
    private Transaction[]? allTransactions;
    private Lookup<string, Transaction>? categorizedTransactions;
    private ClassificationRule[] rules = Array.Empty<ClassificationRule>();

    protected override async Task OnInitializedAsync()
    {
        allTransactions = await TransactionService.GetTransactionsAsync();
        rules = await ClassificationService.GetAllRulesAsync() ?? Array.Empty<ClassificationRule>();

        categorizedTransactions = (Lookup<string, Transaction>)allTransactions
            .ToLookup(transaction => rules.First(r => r.Filter.Matches(transaction)).TargetCategory);
    }
}
